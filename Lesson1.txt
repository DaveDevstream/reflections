####
How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

By being able to correct mistakes easily and reverting back to a copy where the mistake did not exist.
commits are like checkpoints
each represents a version of the content at one point in time.
git forces you to write a description on each commit.

git is a type of version control
commits are a part of git
git diff command operates on commits
####


####
What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

it's good to make meaningful commits to represent one unit of work. An autosave function might save in the middle of creating a new method for program where it does not work, causing confusion when you load it again. 
####


####
Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

A change in a program can be accross different files so it is better to allow saves on multiple files.
####


####
How can you use the commands git log and git diff to view the history of files?

type git log to see all the commits. press space or the down arrow to continue seeing them
type git diff and the id of a commit and the one below it to see the differences between them
remember to press down to see them all.
####

####
How might using version control make you more confident to make changes that could break something?

You can commit something, make changes and if it doesn't work out, you can revert to the commit you made before things went wrong.
####